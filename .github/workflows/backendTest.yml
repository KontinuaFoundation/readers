name: Backend Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: readers_test
        ports:
          - 5432:5432
        # Needed for the PostgreSQL service to be ready before running tests
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Generate hash for the Android directory
      - name: Generate Backend code hash
        id: backend-hash
        run: |
          if [ -d "backend" ]; then
            find backend -type f | sort | xargs md5sum | md5sum | cut -d' ' -f1 > backend_hash.txt
            echo "hash=$(cat backend_hash.txt)" >> $GITHUB_OUTPUT
          else
            echo "hash=no-backend-files" >> $GITHUB_OUTPUT
          fi

        # Step 3: Create cache directory
      - name: Create cache directory
        working-directory: ./backend/readers_backend
        run: mkdir -p .cache/backend-test

      # Step 3: Check cache based on the hash
      - name: Cache test check results
        id: cache-test
        uses: actions/cache@v3
        with:
          path: ./backend/readers_backend/.cache/backend-test
          key: backend-test-${{ steps.backend-hash.outputs.hash }}

      # Step 4: Install python
      - name: Set up Python
        if: steps.cache-test.outputs.cache-hit != 'true' && steps.backend-hash.outputs.hash != 'no-backend-files'
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Step 5: Install backend dependencies
      - name: Install dependencies
        if: steps.cache-test.outputs.cache-hit != 'true' && steps.backend-hash.outputs.hash != 'no-backend-files'
        working-directory: ./backend/readers_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 6: Run Tests
      - name: Run backend tests
        if: steps.cache-test.outputs.cache-hit != 'true' && steps.backend-hash.outputs.hash != 'no-backend-files'
        working-directory: ./backend/readers_backend
        env:
          DJANGO_DEBUG: "True"
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          LOG_TO_FILE: "False"
        run: |
          python3 manage.py test 
          echo "Backend test at $(date)" > ./.cache/backend-test/result

      # Step 7: Report success
      - name: Report test status
        if: success()
        run: echo "backend test successful!"
