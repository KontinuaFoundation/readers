name: Android Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ktlint:
    name: Run Kotlin Linting
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Generate hash for the Android directory
      - name: Generate Android code hash
        id: android-hash
        run: |
          if [ -d "ReaderAndroid" ]; then
            find ReaderAndroid -type f | sort | xargs md5sum | md5sum | cut -d' ' -f1 > android_hash.txt
            echo "hash=$(cat android_hash.txt)" >> $GITHUB_OUTPUT
          else
            echo "hash=no-android-files" >> $GITHUB_OUTPUT
          fi

      # Step 3: Check cache based on the hash
      - name: Cache lint check results
        id: cache-lint
        uses: actions/cache@v3
        with:
          path: .cache/android-lint
          key: android-lint-${{ steps.android-hash.outputs.hash }}

      #Step 4: Set up Java version
      - name: Set up JDK
        if: steps.cache-lint.outputs.cache-hit != 'true' && steps.android-hash.outputs.hash != 'no-android-files'
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      #Step 5: Grant permissions
      - name: Grant execute permission for gradlew
        if: steps.cache-lint.outputs.cache-hit != 'true' && steps.android-hash.outputs.hash != 'no-android-files'
        run: chmod +x ./ReaderAndroid/gradlew

      #Step 6: Run linting check
      - name: Run ktlint checks
        if: steps.cache-lint.outputs.cache-hit != 'true' && steps.android-hash.outputs.hash != 'no-android-files'
        working-directory: ./ReaderAndroid
        run: |
          ./gradlew spotlessKotlinCheck
          mkdir -p ../.cache/android-lint
          echo "Lint check passed at $(date)" > ../.cache/android-lint/result

      #Step 7: Report success
      - name: Report lint status
        run: echo "Android linting successful!"
