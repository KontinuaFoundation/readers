"""
Django settings for readers_backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv


def get_required_env_var(key):
    """
    Retrieves a required environment variable.
    If it doesn't exist then throws an EnvironmentError.
    """
    value = os.environ.get(key)
    if not value:
        raise EnvironmentError(f"Missing required environment variable: {key}")
    return value


load_dotenv()

API_VERSION = "1.0.0"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-3r+kj$$&^pg-av4%scddw6bjiiufkrrpkh7%0+osn#vi!$6f83"

# If we're not in debug, we're going to assume we're in production.
# That is we will integrate with some AWS services and we will expect some environment variables.
DEBUG = get_required_env_var("DJANGO_DEBUG") == "True"

ALLOWED_HOSTS = ["readers.kontinua.org", "165.232.154.30"]

if DEBUG:
    ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "core.apps.CoreConfig",
    "drf_spectacular",
]

MIDDLEWARE = [
    "readers_backend.middleware.ExceptionHandler",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "readers_backend.middleware.LoggingMiddleware",
]

ROOT_URLCONF = "readers_backend.urls"

WSGI_APPLICATION = "readers_backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": get_required_env_var("DB_NAME"),
        "USER": get_required_env_var("DB_USER"),
        "PASSWORD": get_required_env_var("DB_PASSWORD"),
        "HOST": get_required_env_var("DB_HOST"),
        "PORT": get_required_env_var("DB_PORT"),
    }
}


# Default storage backend
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Media files storage directory.
# This is where pdfs will be stored.
MEDIA_URL = "/files/"
MEDIA_ROOT = os.path.join(BASE_DIR, "files")

if not DEBUG:
    MEDIA_ROOT = get_required_env_var("MEDIA_ROOT")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "readers_backend/static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# DJANGO REST FRAMEWORK
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/minute", "feedback": "5/hour"},
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Email Configuration for production
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")  # Gmail's SMTP server
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))  # Gmail's SMTP port
EMAIL_USE_TLS = (
    os.environ.get("EMAIL_USE_TLS", "True") == "True"
)  # TLS is required for Gmail
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")  # App's email address
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")  # App's email password
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
FEEDBACK_EMAIL = os.environ.get(
    "FEEDBACK_EMAIL", EMAIL_HOST_USER
)  # Where feedback should be sent

# The only template view is the index view.
# Will display a basic page with the latest US collection.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "readers_backend/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

SPECTACULAR_SETTINGS = {
    "TITLE": "Readers API",
    "DESCRIPTION": "API for the Readers project",
    "VERSION": API_VERSION,
    "SERVE_INCLUDE_SCHEMA": False,
}


# Logging for production...
# The setup is simple: log requests, responses, and exceptions to files defined by env vars.
SHOULD_LOG_TO_FILE = get_required_env_var("LOG_TO_FILE") == "True"
if SHOULD_LOG_TO_FILE:

    REQUESTS_LOG_FILE = get_required_env_var("REQUESTS_LOG_FILE")
    RESPONSES_LOG_FILE = get_required_env_var("RESPONSES_LOG_FILE")
    EXCEPTIONS_LOG_FILE = get_required_env_var("EXCEPTIONS_LOG_FILE")

    for path in [REQUESTS_LOG_FILE, RESPONSES_LOG_FILE, EXCEPTIONS_LOG_FILE]:
        if not os.path.exists(path):
            with open(path, "a") as f:
                pass

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": True,
        "formatters": {
            "simple_error": {
                "format": "ERROR: {message}",
                "style": "{",
            },
            "json": {
                "format": "{message}",
                "style": "{",
            },
        },
        "handlers": {
            "requests_file": {
                "level": "INFO",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": REQUESTS_LOG_FILE,
                "maxBytes": 5 * 1024 * 1024, # 5MB
                "backupCount": 5,
                "formatter": "json",
            },
            "responses_file": {
                "level": "INFO",
                "class": "logging.handlers.RotatingFileHandler", 
                "filename": RESPONSES_LOG_FILE,
                "maxBytes": 5 * 1024 * 1024, # 5MB
                "backupCount": 5,
                "formatter": "json",
            },
            "exceptions_file": {
                "level": "ERROR",
                "class": "logging.handlers.RotatingFileHandler", 
                "filename": EXCEPTIONS_LOG_FILE,
                "maxBytes": 5 * 1024 * 1024, # 5MB
                "backupCount": 5,
                "formatter": "json",
            },
            "null": {
                "class": "logging.NullHandler",
            },
        },
        "loggers": {
            "readers.requests": {
                "handlers": ["requests_file"],
                "level": "INFO",
                "propagate": False,
            },
            "readers.responses": {
                "handlers": ["responses_file"],
                "level": "INFO",
                "propagate": False,
            },
            "readers.exceptions": {
                "handlers": ["exceptions_file"],
                "level": "ERROR",
                "propagate": False,
            },
            # Disable other logging...
            # We're not using it anyway and clogs stdout.
            "root": {
                "handlers": ["null"],
                "propagate": False,
            },
        },
    }
else:
    # The default django logging when debug is True is fine for local development
    # We just need to disable our custom loggers to avoid clogging stdout.
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "null": {
                "class": "logging.NullHandler",
            },
            "console": {
                "class": "logging.StreamHandler",
            },
        },
        "loggers": {
            # Lets disable our custom loggers for local development.
            "readers.requests": {
                "handlers": ["null"],
                "level": "INFO",
                "propagate": False,
            },
            "readers.responses": {
                "handlers": ["null"],
                "level": "INFO",
                "propagate": False,
            },
            "readers.exceptions": {
                "handlers": ["null"],
                "level": "ERROR",
                "propagate": False,
            },
            # All other logs should use the default handler
            "root": {
                "handlers": ["console"],
                "propagate": False,
                "level": "DEBUG",
            },
        },
    }
